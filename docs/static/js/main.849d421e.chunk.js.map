{"version":3,"sources":["components/Circle.tsx","components/Panel.tsx","components/Help.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Circle","x","y","color","selected","className","style","top","left","width","height","viewBox","preserveAspectRatio","cx","cy","r","strokeWidth","stroke","strokeDasharray","fill","strokeLinecap","transform","Panel","useState","touchDatas","colorMap","lastChangeTime","Date","now","selectedId","undefined","selectData","setSelectData","useEffect","timer","setInterval","state","length","Math","floor","random","id","clearInterval","handleTouch","e","currentTarget","getBoundingClientRect","originX","originY","Array","from","touches","map","touch","clientX","clientY","identifier","newSelectData","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","filter","touchData","key","toString","padStart","Help","maxTouchPoints","window","navigator","isHide","setIsHide","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.849d421e.chunk.js","sourcesContent":["import React from 'react';\n\ninterface CircleProps {\n    x: number,\n    y: number,\n    color: string,\n    selected: boolean,\n}\n\nfunction Circle({\n    x, y, color, selected,\n}: CircleProps) {\n    return (\n        <div\n            className={selected ? 'circle selected' : 'circle'}\n            style={{ top: y - 80, left: x - 75 }}\n        >\n            <svg style={{ width: '100%', height: '100%' }} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n                <circle cx=\"50\" cy=\"50\" r=\"32\" strokeWidth=\"8\" stroke={color} strokeDasharray=\"50.26548245743669 50.26548245743669\" fill=\"none\" strokeLinecap=\"round\" transform=\"rotate(112.395 50 50)\" />\n                <circle cx=\"50\" cy=\"50\" r=\"24\" fill={color} />\n            </svg>\n        </div>\n    );\n}\n\nexport default Circle;\n","/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect } from 'react';\nimport Circle from './Circle';\n\ninterface TouchData {\n    x: number,\n    y: number,\n    id: number,\n}\n\ninterface ColorMap {\n    [id: number]: string,\n}\n\ninterface SelectData {\n    touchDatas: TouchData[],\n    colorMap: ColorMap,\n    lastChangeTime: number,\n    selectedId: number|undefined,\n}\n\nfunction Panel() {\n    const [selectData, setSelectData] = useState<SelectData>({\n        touchDatas: [],\n        colorMap: {},\n        lastChangeTime: Date.now(),\n        selectedId: undefined,\n    });\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setSelectData((state) => {\n                if (state.touchDatas.length > 1\n                    && state.selectedId === undefined\n                    && (Date.now() - state.lastChangeTime) > 2000) {\n                    return {\n                        ...state,\n                        selectedId: state.touchDatas[Math.floor(Math.random() * state.touchDatas.length)].id,\n                    };\n                }\n                return state;\n            });\n        }, 100);\n        return () => {\n            clearInterval(timer);\n        };\n    }, []);\n\n    const handleTouch = (e: React.TouchEvent<HTMLElement>) => {\n        const { x: originX, y: originY } = e.currentTarget.getBoundingClientRect();\n        const touchDatas = Array.from<React.Touch>(e.touches)\n            .map((touch: React.Touch): TouchData => ({\n                x: touch.clientX - originX,\n                y: touch.clientY - originY,\n                id: touch.identifier,\n            }));\n        const newSelectData = {\n            ...selectData,\n            touchDatas,\n        };\n        if (selectData.touchDatas.length !== touchDatas.length) {\n            newSelectData.lastChangeTime = Date.now();\n            if (touchDatas.length < 1) {\n                newSelectData.selectedId = undefined;\n                newSelectData.colorMap = {};\n            }\n        }\n        setSelectData(newSelectData);\n    };\n\n    const getColor = (id: number): string => {\n        if (!selectData.colorMap[id]) {\n            selectData.colorMap[id] = `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\n        }\n        return selectData.colorMap[id];\n    };\n\n    return (\n        <article\n            className=\"panel\"\n            onTouchStart={handleTouch}\n            onTouchMove={handleTouch}\n            onTouchEnd={handleTouch}\n            onTouchCancel={handleTouch}\n        >\n            {\n                selectData.touchDatas\n                    .filter((touchData) => selectData.selectedId === undefined || touchData.id === selectData.selectedId)\n                    .map((touchData) => (\n                        <Circle\n                            key={touchData.id}\n                            x={touchData.x}\n                            y={touchData.y}\n                            color={getColor(touchData.id)}\n                            selected={touchData.id === selectData.selectedId}\n                        />\n                    ))\n            }\n        </article>\n    );\n}\n\nexport default Panel;\n","import React, { useEffect, useState } from 'react';\n\nfunction Help() {\n    const maxTouchPoints : number = window?.navigator?.maxTouchPoints;\n    const [isHide, setIsHide] = useState<boolean>(false);\n\n    useEffect(() => {\n        setInterval(() => {\n            setIsHide(true);\n        }, 1000 * 5);\n    }, []);\n\n    if (!maxTouchPoints || maxTouchPoints <= 1) {\n        return (\n            <article className=\"help\">\n                <span className=\"text\">모바일 기기를 사용해 주세요</span>\n            </article>\n        );\n    }\n\n    return (\n        <article className={`help${isHide ? ' hide' : ''}`}>\n            <span className=\"text\">여러 명이 함께</span>\n            <br />\n            <span className=\"text\">화면을 터치하고 기다리세요</span>\n            <br />\n            <span className=\"text description\">{`(최대 유저 : ${maxTouchPoints})`}</span>\n        </article>\n    );\n}\n\nexport default Help;\n","import React from 'react';\nimport Panel from './components/Panel';\nimport Help from './components/Help';\n\nfunction App() {\n    return (\n        <>\n            <Help />\n            <Panel />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n                        + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n                || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}